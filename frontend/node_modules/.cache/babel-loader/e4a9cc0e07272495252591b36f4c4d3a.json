{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas/Desktop/Valhallaproject/Portfolio/Nico dev web/portfolio/frontend/src/components/portfolio/carousel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport \"./carousel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CarouselItem = ({\n  children,\n  width\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel-item\",\n    style: {\n      width: width\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = CarouselItem;\n\nconst Carousel = ({\n  children\n}) => {\n  _s();\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  const updateIndex = newIndex => {\n    if (newIndex < 0) {\n      newIndex = React.Children.count(children) - 1;\n    } else if (newIndex >= React.Children.count(children)) {\n      newIndex = 0;\n    }\n\n    setActiveIndex(newIndex);\n  };\n\n  useEffect(() => {\n    const interval = () => {\n      if (!paused) {\n        updateIndex(activeIndex + 1);\n      }\n    };\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateIndex(activeIndex + 1),\n    onSwipedRight: () => updateIndex(activeIndex - 1)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", { ...handlers,\n    className: \"carousel\",\n    onMouseEnter: () => setPaused(true),\n    onMouseLeave: () => setPaused(false),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner\",\n      style: {\n        transform: `translateX(-${activeIndex * 100}%)`\n      },\n      children: React.Children.map(children, (child, index) => {\n        return /*#__PURE__*/React.cloneElement(child, {\n          width: \"100%\"\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicators\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          updateIndex(activeIndex - 1);\n        },\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          updateIndex(activeIndex + 1);\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Carousel, \"nCL3dBwrlsy52Fsxr+RqyrrfJCQ=\", false, function () {\n  return [useSwipeable];\n});\n\n_c2 = Carousel;\nexport default Carousel;\n/*\n{React.Children.map(children, (child, index) => {\n    return (\n      <button\n        className={`${index === activeIndex ? \"active\" : \"\"}`}\n        onClick={() => {\n          updateIndex(index);\n        }}\n      >\n        {index + 1}\n      </button>\n    );\n  })}*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CarouselItem\");\n$RefreshReg$(_c2, \"Carousel\");","map":{"version":3,"sources":["/Users/nicolas/Desktop/Valhallaproject/Portfolio/Nico dev web/portfolio/frontend/src/components/portfolio/carousel.js"],"names":["React","useEffect","useState","useSwipeable","CarouselItem","children","width","Carousel","activeIndex","setActiveIndex","paused","setPaused","updateIndex","newIndex","Children","count","interval","clearInterval","handlers","onSwipedLeft","onSwipedRight","transform","map","child","index","cloneElement"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\n\nimport \"./carousel.css\";\n\nexport const CarouselItem = ({ children, width }) => {\n  return (\n    <div className=\"carousel-item\" style={{ width: width }}>\n      {children}\n    </div>\n  );\n};\n\nconst Carousel = ({ children }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  const updateIndex = (newIndex) => {\n    if (newIndex < 0) {\n      newIndex = React.Children.count(children) - 1;\n    } else if (newIndex >= React.Children.count(children)) {\n      newIndex = 0;\n    }\n\n    setActiveIndex(newIndex);\n  };\n\n  useEffect(() => {\n    const interval = () => {\n      if (!paused) {\n        updateIndex(activeIndex + 1);\n      }\n    };\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateIndex(activeIndex + 1),\n    onSwipedRight: () => updateIndex(activeIndex - 1)\n  });\n\n  return (\n    <div\n      {...handlers}\n      className=\"carousel\"\n      onMouseEnter={() => setPaused(true)}\n      onMouseLeave={() => setPaused(false)}\n    >\n      <div\n        className=\"inner\"\n        style={{ transform: `translateX(-${activeIndex * 100}%)` }}\n      >\n        {React.Children.map(children, (child, index) => {\n          return React.cloneElement(child, { width: \"100%\" });\n        })}\n      </div>\n      <div className=\"indicators\">\n        <button\n          onClick={() => {\n            updateIndex(activeIndex - 1);\n          }}\n        >\n          Prev\n        </button>\n        \n        <button\n          onClick={() => {\n            updateIndex(activeIndex + 1);\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n\n/*\n{React.Children.map(children, (child, index) => {\n    return (\n      <button\n        className={`${index === activeIndex ? \"active\" : \"\"}`}\n        onClick={() => {\n          updateIndex(index);\n        }}\n      >\n        {index + 1}\n      </button>\n    );\n  })}*/"]},"metadata":{},"sourceType":"module"}