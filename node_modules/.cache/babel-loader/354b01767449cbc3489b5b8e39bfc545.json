{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas/Desktop/Valhallaproject/Portfolio/Nico dev web/portfolio/frontend/src/components/portfolio/carousel.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport \"./carousel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CarouselItem = ({\n  children,\n  width\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel-item\",\n    style: {\n      width: width\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n/*const Carousel = ({ children }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  const updateIndex = (newIndex) => {\n    if (newIndex < 0) {\n      newIndex = React.Children.count(children) - 1;\n    } else if (newIndex >= React.Children.count(children)) {\n      newIndex = 0;\n    }\n\n    setActiveIndex(newIndex);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!paused) {\n        updateIndex(activeIndex + 1);\n      }\n    }, 3000);\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateIndex(activeIndex + 1),\n    onSwipedRight: () => updateIndex(activeIndex - 1)\n  });\n\n  return (\n    <div\n      {...handlers}\n      className=\"carousel\"\n      onMouseEnter={() => setPaused(true)}\n      onMouseLeave={() => setPaused(false)}\n    >\n      <div\n        className=\"inner\"\n        style={{ transform: `translateX(-${activeIndex * 100}%)` }}\n      >\n        {React.Children.map(children, (child, index) => {\n          return React.cloneElement(child, { width: \"100%\" });\n        })}\n      </div>\n      <div className=\"indicators\">\n        <button\n          onClick={() => {\n            updateIndex(activeIndex - 1);\n          }}\n        >\n          Prev\n        </button>\n        \n        <button\n          onClick={() => {\n            updateIndex(activeIndex + 1);\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n\n/*\n{React.Children.map(children, (child, index) => {\n    return (\n      <button\n        className={`${index === activeIndex ? \"active\" : \"\"}`}\n        onClick={() => {\n          updateIndex(index);\n        }}\n      >\n        {index + 1}\n      </button>\n    );\n  })}*/\n\n_c = CarouselItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarouselItem\");","map":{"version":3,"sources":["/Users/nicolas/Desktop/Valhallaproject/Portfolio/Nico dev web/portfolio/frontend/src/components/portfolio/carousel.js"],"names":["React","useEffect","useState","useSwipeable","CarouselItem","children","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,gBAAP;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AACnD,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAAEA;AAAT,KAAtC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KA3FaD,Y","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\n\nimport \"./carousel.css\";\n\nexport const CarouselItem = ({ children, width }) => {\n  return (\n    <div className=\"carousel-item\" style={{ width: width }}>\n      {children}\n    </div>\n  );\n};\n\n/*const Carousel = ({ children }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  const updateIndex = (newIndex) => {\n    if (newIndex < 0) {\n      newIndex = React.Children.count(children) - 1;\n    } else if (newIndex >= React.Children.count(children)) {\n      newIndex = 0;\n    }\n\n    setActiveIndex(newIndex);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!paused) {\n        updateIndex(activeIndex + 1);\n      }\n    }, 3000);\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateIndex(activeIndex + 1),\n    onSwipedRight: () => updateIndex(activeIndex - 1)\n  });\n\n  return (\n    <div\n      {...handlers}\n      className=\"carousel\"\n      onMouseEnter={() => setPaused(true)}\n      onMouseLeave={() => setPaused(false)}\n    >\n      <div\n        className=\"inner\"\n        style={{ transform: `translateX(-${activeIndex * 100}%)` }}\n      >\n        {React.Children.map(children, (child, index) => {\n          return React.cloneElement(child, { width: \"100%\" });\n        })}\n      </div>\n      <div className=\"indicators\">\n        <button\n          onClick={() => {\n            updateIndex(activeIndex - 1);\n          }}\n        >\n          Prev\n        </button>\n        \n        <button\n          onClick={() => {\n            updateIndex(activeIndex + 1);\n          }}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n\n/*\n{React.Children.map(children, (child, index) => {\n    return (\n      <button\n        className={`${index === activeIndex ? \"active\" : \"\"}`}\n        onClick={() => {\n          updateIndex(index);\n        }}\n      >\n        {index + 1}\n      </button>\n    );\n  })}*/"]},"metadata":{},"sourceType":"module"}